1. "싱글톤 클래스"를 구현하는 방법에 대해서 설명하세요...
	
	싱글톤(Singleton) 클래스 :  프로그램에서 단 하나의 인스턴스만 생성되도록 보장하는 클래스입니다.

	1. 생성자를 private으로 선언하여 외부에서 객체를 생성할 수 없도록 제한합니다.
	2. 클래스 내부에 유일한 인스턴스를 저장할 정적 변수(static)를 선언합니다.
	3. 인스턴스를 반환하는 정적 메서드(static)를 제공하여 외부에서 접근할 수 있게 합니다.

	싱글톤의 특징
	- 유일한 인스턴스만 유지.
	- 자원을 절약하고, 글로벌한 접근점 제공.
	- 주로 공유 리소스 관리나 설정 정보 관리 등에 사용.



2. instanceof 연산자에 대해서 설명하세요. 

	- instanceof는 객체가 특정 클래스나 그 하위 클래스의 인스턴스인지 확인하는데 사용되는 연산자

	특징
	- 객체가 해당 클래스 또는 상속 관계에 있는 클래스의 객체인 경우 true를 반환합니다.
	- 주로 다운캐스팅 전의 타입 검증에 사용됩니다.

	사용법
	object instanceof ClassName

	주의사항
	- 상속관계에서 다운캐스팅할 때 사용하며 자식클래스부터, if else if문을 사용하여야 한다.




3. [매개변수 다형성]에 대해서 설명하세요 . 

	- 부모 클래스 타입의 매개변수를 통해 자식 클래스 객체를 전달하고, 다양한 형태의 동작을 수행할 수 있는 성질
	  업캐스팅을 통해 이루어지며, 메서드 호출 시 실행되는 내용은 실제 객체의 타입에 따라 결정

	특징
	- 코드의 유연성과 확장성을 높이는 데 유용.
	- 부모 클래스 타입을 매개변수로 사용하므로 다양한 자식 클래스 객체를 전달 가능.



4. [] 대괄호 안에 있다. 없다 골라서 적으세요.
  1) 메서드에 static과 abstract를 함께 사용할 수 [ 없다 ]. 
  2) 클래스에 static과 final을 동시에 사용할 수 [ 없다 ]. 
  3) abstract메서드의 접근 제어자가 private일  수 [ 없다 ]. 
  4) 메서드에 private과 final을 같이 사용할 필요 [ 있다 ].



5. 클래스(OOP)의 특징에 대해서 상세히 설명하세요. 
	1) 캡슐화(Encapsulation)
		정의 : 데이터를 외부로부터 보호하고, 데이터에 대한 접근을 제한하며, 필요한 경우 접근을 제어한다.
		목적 : 외부에서 객체의 내부 상태를 직접 변경하지 못하게 보호하여 데이터의 무결성과 안전성을 유지한다.
		구현 : 필드를 private로 선언 + getter/setter 메서드를 통해 접근

	2) 상속(Inheritance)
		정의 : 기존 클래스(부모)를 기반으로 새로운 클래스(자식)를 정의
		목적 : 코드 재사용성을 높이고 중복을 줄임. 계층 구조를 통해 객체를 논리적으로 구조화
		구현 : extends 키워드를 사용, 부모 클래스의 메서드와 필드를 자식 클래스에서 사용 가능

	3) 다형성(Polymorphsim)
		정의 : 동일한 이름의 메서드나 객체가 다양한 동작을 수행할 수 있는 능력
		종류 : 오버로딩, 오버라이딩
			1) 오버로딩 : 메서드 이름은 같지만 매개변수의 타입이나 갯수를 다르게 정의  - 컴파일타임 다형성
			2) 오버라이딩 : 부모 클래스의 메서드를 자식 클래스에서 재정의 - 런타임 다형성

	4) 추상화(Abstration)
		정의 : 객체의 복잡한 내부 동작을 감추고 필요한 기능만 외부에 제공, 공통적인 부분(멤버)만을 뽑아 따로 빼둔 것
		목적 : 불필요한 구현 세부사항을 숨기고, 사용자에게 꼭 필요한 정보만 노출
		구현 : 추상 클래스나 인터페이스를 통해 정의



6. abstract 키워드에 대해서 설명하세요. 

	정의 : 추상 클래스와 추상 메서드를 정의할 때 사용하는 키워드로, 객체화가 불가능한 클래스나 구현되지 않는 메서드를 나타낸다.
	특징 - 추상 클래스 : 객체를 생성할 수 없으며, 상속을 통해서만 사용 가능하다.
				 추상 메서드와 일반 메서드를 모두 가질 수 있다.
				 abstract 키워드를 클래스 선언에 사용한다. 	예) pulbic abstract class Employee { } 
				 객체를 생성할 수 없는 불완전한 클래스이다. (미완성 클래스)
				 혼자서는 아무런 역할을 할 수 없다.
				 공통적인 부분(멤버)만을 미리 선언한 클래스이다.
				 추상메서드가 없어도 추상클래스로 선언 가능하다.
				 추상클래스도 일종의 클래스이기 때문에 업캐스팅이 가능하다.
				 추상클래스로부터 물려받은 추상메서드를 모두 오버라이딩하지 않으면 그 클래스도 추상 클래스가 된다.

		추상 메서드 : 선언만 존재하며 구현은 자식 클래스에서 이루어진다.
				반드시 추상 클래스 안에 있어야 한다.
				메서드 선언에 abstract 키워드 사용한다.		예) public abstract int getPay();  
				구현이 안된 불완전한 메서드를 abstract 키워드를 붙여서 "추상메서드"라고 부른다.
				반드시 오버라이딩해서 사용하는 메서드는 몸체없이 선언한다.

	목적 : 부모 클래스에서 공통된 동작을 정의하고, 자식 클래스에서 구체적인 동작을 구현하도록 강제
	사용 방법 : 상속을 통해 사용한다. 추상 클래스를 상속받는 자식 클래스는 모든 추상 메서드를 구현해야 한다.



7. 인터페이스(interface) 에 대해서 상세히 설명하세요.

	1. 자바의 자료형에서 참조형 자료형이다.
	2. 일종의 추상 클래스이다.
	3. 추상 클래스와 차이점
		1) 일반 메서드 선언 불가
		2) 100% 추상 메서드
		3) 필드 선언 X, 상수만 선언 	== 변수 선언 불가
	4. 인터페이스는 그 자체만으로 사용되지 않고, 다른 클래스를 작성하는 데 도움을 줄 목적의 클래스이다.
	5. 모든 필드(멤버변수)는 public static final 이다.
		interface IX {
			int age; 	// == public static final int age; 와 같다.
			void test();	// == public abstract void test(); 와 같다.
		}
	6. 모든 메서드는 public abstract 이다.
	7. JDK 1.8 ~ 인터페이스 안에
		1) static 메서드
		2) default 메서드
		를 선언할 수 있다.		== 인터페이스도 추상클래스의 일종이고, 추상클래스도 클래스로 생각하기 때문
	8. 인터페이스끼리 상속이 가능하다.
		extends 키워드를 사용한다.
	9. 인터페이스를 구현할 때는 implements 키워드를 사용한다.
		interface List {
		}

		class Sample implements List {
		}
	10. 클래스는 다중 상속을 지원하지 않지만 인터페이스를 사용해서 다중 상속이 가능하다.
	11. 인터페이스 선언 형식
		[접근지정자] interface 인터페이스명 [extends 인터페이스...] {
			// 상수만
			// 추상 메서드만

			// JDK1.8~
			// + static 메서드 또는 default 메서드
		}


	장점 : 개발 시간을 단축, 표준화 가능, 서로 관련 없는 클래스들에게 관계를 맺어 줄 수도 있다.















