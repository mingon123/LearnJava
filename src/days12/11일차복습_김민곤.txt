1. 용어 정리
  1) 객체 지향적 프로그래밍( OOP ) 
	- 컴퓨터를 부품을 합쳐 조립하듯 객체끼리 조립해 프로그램을 만드는 것

  2) 객체        
	- 클래스로 실제 존재하는 것. 사물 또는 개념의 형태로.

  3) 클래스    
	- 객체 설계도 ( 객체를 만들기 위한 설계도)

  4) 인스턴스 
	- 생성된 객체

  5) 인스턴스화
	- 객체를 생성하는 과정

  6) 객체의 구성요소 
	- 필드(특성), 메서드(기능)

  7) 멤버 
	- 클래스에 포함된 모든 구성 요소를 지칭하는 용어. 멤버 변수(필드)와 멤버 함수(메서드)를 포함한다.

  8) 멤버변수
	- 클래스 내부에서 선언된 변수로, 클래스나 객체의 속성을 나타냄. 종류로는 인스턴스 변수, 클래스 변수가 있다.

  9) 멤버함수
	- 클래스에 정의된 함수로, 객체의 동작(행위)를 수행. 메서드라고도 함.

  10) 필드
	- 클래스의 멤버 변수를 지칭. 객체의 속성을 정의한다.

  11) 메서드  
	- 객체의 행위를 정의. 객체가 데이터를 처리하거나 특정 작업을 수행할 때 호출.

  12) 변수 
	- 데이터를 저장하기 위한 메모리 공간. 지역변수, 매개변수, 멤버 변수 등이 있다.

      상수
	- 한 번 값이 할당되면 변경되지 않는 변수. final 키워드를 사용하여 선언한다.

      리터럴           
	- 코드에 직접 작성된 고정값. 예) 숫자, 문자, boolean 등 ( int a =10 )에서 10이 리터럴 값이다.

  13) 참조변수
	- 객체의 메모리 주소를 저장하는 변수. 이를 통해 객체에 접근한다.


  
2. 클래스의 특징( OOP의 특징 )에 대해서 설명하세요.
	1) 상속성 : 부모 클래스로부터 코드를 물려받는다
	2) 캡슐화(은닉화)  : 데이터의 구조와 데이터를 방법을 결합시켜 묶는 것. 데이터를 은닉하고, 외부에서 접근하지 못하게 한다.
	3) 다형성 : 다양한 형태로 표현이 가능한 구조. overloading 등...
	4) 추상화 : 객체들의 공통 특징을 뽑아 하나의 클래스로 표현하는 것



3. 클래스의 설계 과정에 대해서 설명하세요. 
	1) 객체의 구성요소 파악
	2) 클래스 선언
	3) 객체 생성
	4) 문제점 파악
	5) 상용화
	6) 기능 추가, 확장



4. [객체]에 [멤버(필드, 메서드, 생성자 )]를 접근하는 방법에 대해서 설명하세요.
	- 참조변수를 사용하여 접근한다. 
	ex) 객체명.메서드명(); , 객체명.필드명(); 으로 접근할 수 있다.



5. NullPointerException 예외(에러)는 언제 발생하는 가 ? 
	- 인스턴스화를 하지 않았을 때 발생한다. new Car();을 통해 해결할 수 있다.


     
6. 클래스의 선언 형식
	- [접] [기] 자료형 필드명[=초기값]; 
	

     
7. 클래스 앞의 접근지정자의 종류에 대해서 설명하세요.
	1) public(활성화) : 패키지 내/외부에서 사용( 상속과 참조 ) 가능
	2) default(==pacage)(활성화) :  패키지 내에서만 사용( 상속과 참조 ) 가능
	3) protected (비활성화) : default + 패키지 외부에서는 상속만 가능
	4) private(비활성화) : 같은 클래스 내에서만 상속, 참조 가능


   
8. 멤버 앞의 접근지정자의 종류에 대해서 설명하세요.

	1) private : 같은 클래스 내에서만 접근(참조) 가능
	2) default : 패키지 내부에서만 접근(참조) 가능
	3) protected : default + 상속( 패키지 외부에서 자식 클래스에 접근 가능)
	4) public : 패키지 내/외부 어디서나 접근(참조) 가능.



9. 클래스 선언할 때 기타제어자 종류에 대해서 설명하세요.
	1) final (활성화) : 
		필드 앞-상수
		메서드 앞
		클래스 앞 - 자식을 가질 수 없는 최종(마지막) 클래스로 선언(상속X)
	2) static (비활성화) : 중첩 클래스를 선언할 때 사용가능, 정적클래스라고도 함.
	3) abstract (활성화 ) : 추상클래스로 선언



10. 클래스 복사 ( 객체 복사 )/ 클래스 복제( 객체 복제 )에 대해서 설명하세요.  
 	- 클래스 복사 : 객체가 가진 값을 복사하는 것
	- 클래스 복제 : 객체를 복제하는 표준적인 방법



11. 클래스 배열( 객체 배열 ) 에 대해서 설명하세요.  
	- 객체를 요소로 가지는 배열. 객체 배열은 배열의 각 요소가 클래스 타입이며, 각 요소는 객체에 대한 참조(주소)를 저장한다. 초기화가 필요하다.
	  선언 형식 : 클래스명[] 배열이름 = new 클래스명[배열크기];


12.  선언되는 위치를 기준으로 변수 구분하고, 생성시기, 소멸시기에 대해서 설명하세요. 
      
	변수 종류				선언 위치					생성 시기					소멸 시기
	클래스 변수 (정적 필드)	static 키워드로 선언된 변수	클래스가 메모리에 로드될 때		프로그램 종료 시(클래스 언로드 시)
	인스턴스 변수			클래스 내부, static 없이 선언	객체가 생성될 때				객체가 더 이상 참조되지 않을 때 (GC에 의해 소멸)
	지역 변수				메서드, 생성자, 블록 내부에 선언	메서드나 블록이 실행될 때		메서드나 블록 실행 종료 시
	매개변수				메서드/생성자의 파라미터로 선언	메서드가 호출될 때			메서드 실행 종료 시



13. 한 반의 30명의 학생의 성적 관리
    Student 클래스를 선언 후 
    클래스 배열을 사용해서 처리하세요
    ( 입력, 성적 처리, 출력 )       


    public static void main(String[] args) {
        final int STUDENT_COUNT = 30; // 총 학생 수
        Student[] students = new Student[STUDENT_COUNT];

        // [1] 학생 정보 입력
        for (int i = 0; i < STUDENT_COUNT; i++) {
            students[i] = new Student(); // 객체 생성

            students[i].name = getName(); // 이름 랜덤 생성
            students[i].kor = getScore(); // 국어 점수 랜덤 생성
            students[i].eng = getScore(); // 영어 점수 랜덤 생성
            students[i].mat = getScore(); // 수학 점수 랜덤 생성

            students[i].tot = students[i].kor + students[i].eng + students[i].mat; // 총점 계산
            students[i].avg = students[i].tot / 3.0; // 평균 계산
            students[i].rank = 1; // 초기 등수는 모두 1로 설정
        }

        // [2] 등수 처리
        for (int i = 0; i < STUDENT_COUNT; i++) {
            for (int j = 0; j < STUDENT_COUNT; j++) {
                if (students[i].tot < students[j].tot) {
                    students[i].rank++; // 총점이 낮으면 등수 증가
                }
            }
        }

        // [3] 출력
        System.out.println("이름\t국어\t영어\t수학\t총점\t평균\t등수");
        System.out.println("-----------------------------------------------------");
        for (int i = 0; i < STUDENT_COUNT; i++) {
            System.out.println(students[i].getStudentInfo());
        }

        // [4] 국어 점수가 가장 높은 학생 찾기
        int maxKorIndex = 0;
        for (int i = 1; i < STUDENT_COUNT; i++) {
            if (students[i].kor > students[maxKorIndex].kor) {
                maxKorIndex = i;
            }
        }

        System.out.printf("\n국어 점수가 가장 높은 학생: %s (%d점)\n",
                students[maxKorIndex].name, students[maxKorIndex].kor);
    }

    // 랜덤 이름 생성
    public static String getName() {
        char[] nameArr = new char[3];
        Random rnd = new Random();
        for (int i = 0; i < nameArr.length; i++) {
            nameArr[i] = (char) (rnd.nextInt('힣' - '가' + 1) + '가');
        }
        return new String(nameArr);
    }

    // 랜덤 점수 생성 (0 ~ 100)
    public static int getScore() {
        return (int) (Math.random() * 101);
    }
}



public class Student {
	// 필드
	public String name;
	public int kor, eng, mat, tot, rank, wrank;
	public double avg;
	
	// 메서드 
	public String getStudentInfo() {
		return String.format("%s\t%d\t%d\t%d\t%d\t%.2f\t%d\t%d", name, kor, eng, mat, tot, avg, rank, wrank);
	}
}
