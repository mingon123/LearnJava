1. 한 반에 10명인 학생의 성적 관리
         ( 이름, 국어, 영어, 수학, 총점, 평균, 등수  )
         1. 이름, 국,영,수 입력
         2. 총,평, 등 계산 처리
         3. 모든 학생 정보를 출력..
    조건) 등수 처리하는 메서드를 만드세요. 
    조건) 학생 이름,국,영,수 입력은 자동으로 처리하는 메서드를 만드세요.
    조건) 배열의 크기보다 학생 입력을 많이 할 경우 자동으로 배열의 크기를 3증가 시키는 코딩을 추가하세요.
          
          
	public static void main(String[] args) throws IOException {
		final int STDENT_NUMBER = 10;
		
		String [] names = new String[STDENT_NUMBER];
		int [] kors = new int[STDENT_NUMBER];
		int [] engs = new int[STDENT_NUMBER];
		int [] mats = new int[STDENT_NUMBER];
		int [] tots = new int[STDENT_NUMBER];
		double [] avgs = new double[STDENT_NUMBER];
		int [] ranks = new int[STDENT_NUMBER];
		
		int cnt = 0; // 입력받은 학생의 수
		char con = 'y';
		
		// 입력받은 한 학생의 정보를 저장할 변수
		String name;
		int kor, eng, mat, tot, rank;
		double avg;

		Scanner scanner = new Scanner(System.in);
		
		do {
			// 배열의 크기 증가 코딩
			if(cnt == names.length) { // 위치가 아래면 cnt+1이 되어야함.
	            kors = Arrays.copyOf(kors, kors.length+3);
	            engs = Arrays.copyOf(engs, engs.length+3);
	            mats = Arrays.copyOf(mats, mats.length+3);
	            tots = Arrays.copyOf(tots, tots.length+3);
	            avgs = Arrays.copyOf(avgs, avgs.length+3);
	            ranks = Arrays.copyOf(ranks, ranks.length+3);
	            names = Arrays.copyOf(names, names.length+3);
	         }    
			
			// 입력 및 초기화
			System.out.print("> 이름 국어 영어 수학 정보 입력 ? ");
			name = getName();
			kor = getScore();
			eng = getScore();
			mat = getScore();
						
			tot = kor + eng + mat;
			avg = (double)tot/3;
			rank = 1; 
			
			// 각각의 배열에 어디에 채워넣을까?
			// cnt가 0부터 1씩 증가하고 index도 0부터 1씩 채우기 때문에 [cnt]를 한다.
			names[cnt] = name;
			kors[cnt] = kor;
			engs[cnt] = eng;
			mats[cnt] = mat;
			tots[cnt] = tot;
			avgs[cnt] = avg;
			ranks[cnt] = rank;
			
			cnt++;
			// 입력 계속 여부
			System.out.print("> 학생 입력 계속 ? ");
			con = (char) System.in.read();
			System.in.skip(System.in.available());
		} while ( Character.toUpperCase(con) == 'Y' );
				
		
		// 1. 등수 처리
		processingRanks(tots, ranks, cnt);
		
		// 2. 출력
		printStudent(names, kors, engs, mats, tots, avgs, ranks, cnt);
		
	}
	
	public static void printStudent(String[] names, int[] kors, int[] engs, int[] mats, int[] tots, 
    								double[] avgs, int[] ranks, int cnt) {
		System.out.printf("> 입력받은 학생수: %d명\n", cnt);
		// 출력...
		for (int i = 0; i < cnt; i++) {
			System.out.printf("[%d]\t%s\t%d\t%d\t%d\t%d\t%.2f\t%d\n", i+1, names[i], kors[i], engs[i], 
            														mats[i], tots[i], avgs[i], ranks[i]);
		} // for
	}

	
	public static void processingRanks(int[] tots, int[] ranks, int cnt) {
		for (int i = 0; i < cnt; i++) { // 등수를 매길 학생
			// tots[i] // 등수를 매길 학생
			ranks[i] = 1;
			
			for (int j = 0; j < cnt; j++) { // 비교할 모든 학생 for문
				if (tots[i] < tots[j]) ranks[i]++;
			} // for j
		} // for i
	} // processingRanks

	
	public static String getName() {
		char [] nameArr = new char[3];
		Random rnd = new Random();
		for (int i = 0; i < nameArr.length; i++) {
			nameArr[i] = (char)(rnd.nextInt('힣'-'가'+1)+'가');
		}
		// char[] -> String 변환
		String name = new String(nameArr);
		return name;
	} // getName

	
	public static int getScore() {
		return (int)(Math.random()*101);
	} // getScore
	
	
	
          
          
2. 선택 정렬(selection sort) 
   int [] m = new int[10]
   조건) 위의 배열 m에 1<=~<=100 임의의 정수를 채워넣고 
        선택정렬 방식으로 내림차순 정렬해서 출력하세요.

	    int[] m = new int[10];
	    Random rnd = new Random();
	
	    for (int i = 0; i < m.length; i++) {
	        m[i] = rnd.nextInt(100) + 1; // 1부터 100 사이의 정수
	    }
	    
	    selectionSort2(m);
	    
	} // main
	
	private static void selectionSort2(int[] m) {
	    for (int i = 0; i < m.length - 1; i++) {
	        int maxIdx = i; 		// 가장 큰 값의 인덱스 찾기
	        for (int j = i + 1; j < m.length; j++) {
	            if (m[j] > m[maxIdx]) {
	                maxIdx = j; 	// 더 큰 값이 있으면 인덱스 갱신
	            }
	        }
	        int temp = m[i];
	        m[i] = m[maxIdx];
	        m[maxIdx] = temp;
	    }
	}




3. 1차원 배열을 출력하는 메서드를 선언하세요.
    int [] m = new int[10];
    
    
 	    int [] m = new int[10];
        dispArr(m);
    } // main
    
	private static void dispArr(int[] m) {
		for (int i = 0; i < m.length; i++) {
			System.out.printf("m[%d]=%d ", i, m[i]);
		}
		System.out.println();
	}      
    
    
    
    
4. 2차원 배열을 출력하는 메서드를 선언하세요.
    int [][] m = new int[3][2];
    
    
        int [][] m = new int[3][2];
        dispArr(m);
    } // main
        
	private static void dispArr(int[][] m) {
		for (int i = 0; i < m.length; i++) { // 행 for
			for (int j = 0; j < m[i].length; j++) { // 열 for
				System.out.printf("m[%d][%d]=%d ", i, j, m[i][j]);
			}
			System.out.println();
		}
	}        
    
    
    
    
5. 3차원 배열을 출력하는 메서드를 선언하세요.
    int [][][] m = new int[3][2][4];

    
    	int [][][] m = new int[3][2][4];
        dispArr(m);
    } // main;    
        
	private static void dispArr(int[][][] m) {
		for (int i = 0; i < m.length; i++) { // 면
			for (int j = 0; j < m[i].length; j++) { // 행
				for (int k = 0; k < m[i][j].length; k++) { // 열
					System.out.printf("m[%d][%d][%d]=%d ", i, j, k, m[i][j][k]);
				}
				System.out.println();
			}
			System.out.println();
		}
	}    
    
    
    
    